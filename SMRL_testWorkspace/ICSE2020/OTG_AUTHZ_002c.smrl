import static smrl.mr.language.Operations.*

package smrl.mr.owasp {

/**
   * A URL that cannot be reached by a user while navigating the user interface should not 
   * be available to that same user even when she directly requests the URL to the server. 
   * 
   * The metamorphic relation iterates over all the actions of an input sequence.
   * 
   * The 1st parameter of IMPLIES is made of four clauses.
   * The 1st clause checks whether the user in User() is not a supervisor of the user performing the y-th action.
   * The 2nd clause verifies that the y-th action is performed after a login.
   * The 3rd clause verifies that the follow-up user cannot retrieve the URL of the action through the GUI 
   * (based on the data collected by the crawler).
   * The 4th clause defines a follow-up input that performs the login as the follow-up user 
   * and then performs the given action.
   * 
   * The 2nd parameter of IMPLIES verifies the result. It is implemented as an OR operation where
   * The 1st parameter checks if the y-th action from the source input leads to an error page.
   * The 2nd parameter verifies if the output generated by the action containing the URL indicated above,
   * lead to two different outputs in the two cases.
   *  	
   */ 
  MR OTG_AUTHZ_002c {
  	{
    	for(var y = Input(1).actions().size()-1; ( y > 0 ); y--){
  			IMPLIES(
  				//1st par of IMPLIES including 4 clauses
  				(!isSupervisorOf(User(), Input(1).actions().get(y).user)) &&
  				afterLogin(Input(1).actions().get(y)) &&
  				cannotReachThroughGUI(User(), Input(1).actions().get(y).getUrl()) &&
  				EQUAL(Input(2), Input(LoginAction(User()), Input(1).actions().get(y)) )
  				,
  				//2nd par of IMPLIES
  				OR(
  					isError(Output(Input(1), y)),
  					different(
	  					Output(Input(1), y),
	  					Output(Input(2), 1)
  					)
				)
  			); //end-IMPLIES
		} //end-for
    }
  } //end-MR
} //end-package